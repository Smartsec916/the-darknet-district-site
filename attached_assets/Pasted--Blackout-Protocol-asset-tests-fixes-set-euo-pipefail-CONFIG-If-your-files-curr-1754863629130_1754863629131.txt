# === Blackout Protocol: asset tests + fixes ===
set -euo pipefail

# --- CONFIG: If your files currently live somewhere else, change SRC. ---
SRC="./assets"                  # e.g., "./public/assets" or "./static/assets"
ROOT="./blackout-protocol"
DEST="$ROOT/assets"
PAGE="$ROOT/index.html"

echo ">> Checking required paths…"
[ -f "$PAGE" ] || { echo "ERROR: $PAGE not found"; exit 1; }
mkdir -p "$DEST"

# The exact files your game references (case-sensitive)
FILES=(
  "4K.png"
  "Drink_Oil_01.png"
  "Drink_Oil_02.png"
  "Meat.png"
  "HoloCompanion.png"
  "Rent.png"
  "01_bg_far.png"
  "01_bg_near.png"
  "coin.png"
  "door.png"
  "ledge_tile.png"
  "player_idle_48.png"
  "player_walk_48.png"
  "player_run_48.png"
  "player_jump_48.png"
  "player_fall_48.png"
  "player_hurt_48.png"
  "player_dead_48.png"
  "robot_idle_48.png"
  "robot_walk_48.png"
  "robot_run_48.png"
  "robot_attack_48.png"
  "robot_hurt_48.png"
  "robot_dead_48.png"
  "drone_idle_32.png"
  "drone_hover_32.png"
  "drone_move_32.png"
  "drone_attack_32.png"
  "drone_hurt_32.png"
  "drone_dead_32.png"
)

echo ">> Filesystem self-test (what the game will try to load under /blackout-protocol/assets):"
MISSING=0
for f in "${FILES[@]}"; do
  if [ -f "$DEST/$f" ]; then
    printf "  ✓ %s\n" "$DEST/$f"
  else
    printf "  ✗ MISSING %s\n" "$DEST/$f"
    MISSING=$((MISSING+1))
  fi
done

# If some are missing and you have them in $SRC, copy them over (non-destructive).
if [ "$MISSING" -gt 0 ]; then
  echo ">> Attempting to copy missing files from: $SRC"
  COPIED=0
  for f in "${FILES[@]}"; do
    if [ ! -f "$DEST/$f" ] && [ -f "$SRC/$f" ]; then
      cp -n "$SRC/$f" "$DEST/$f"
      printf "  → copied %s -> %s\n" "$SRC/$f" "$DEST/$f"
      COPIED=$((COPIED+1))
    fi
  done
  echo ">> Copied $COPIED files into $DEST"
else
  echo ">> All expected files already present."
fi

# Re-run quick report after copy
echo ">> Post-copy check:"
POST_MISSING=0
for f in "${FILES[@]}"; do
  [ -f "$DEST/$f" ] || { printf "  ✗ STILL MISSING %s\n" "$DEST/$f"; POST_MISSING=$((POST_MISSING+1)); }
done
[ "$POST_MISSING" -eq 0 ] && echo "  ✓ All required files are present." || echo "  ⚠ $POST_MISSING file(s) still missing."

# --- Inject in-game diagnostics into index.html ---
# 1) Backup
STAMP="$(date +%Y%m%d-%H%M%S)"
BACK="$PAGE.bak-$STAMP"
cp "$PAGE" "$BACK"
echo ">> Backed up $PAGE -> $BACK"

# 2) Ensure the diagnostic function is present (append once, idempotent)
if ! grep -q "function assetSelfTest()" "$PAGE"; then
  cat >> "$PAGE" <<'EOF_ASSET_FUNC'

<!-- === Injected: Asset Self-Test (diagnostic) === -->
<script>
/* Heads-up: this runs in the page context and relies on fetch(). */
function __collectAssetUrls(){
  try{
    // Pull from globals the game defines
    const urls = [];
    if (typeof SPRITE_DEF === 'object'){
      ['player','robot','drone'].forEach(k=>{
        const o = SPRITE_DEF[k];
        if (o && o.states) urls.push(...Object.values(o.states));
      });
      if (SPRITE_DEF.bg_far) urls.push(SPRITE_DEF.bg_far);
      if (SPRITE_DEF.bg_near) urls.push(SPRITE_DEF.bg_near);
      if (SPRITE_DEF.coin) urls.push(SPRITE_DEF.coin);
      if (SPRITE_DEF.door) urls.push(SPRITE_DEF.door);
      if (SPRITE_DEF.ledge) urls.push(SPRITE_DEF.ledge);
    }
    if (typeof AD_SRC === 'object'){
      ['fourk','meat','holo','rent','drinkA','drinkB'].forEach(k=>{
        if (AD_SRC[k]) urls.push(AD_SRC[k]);
      });
    }
    return urls.filter(Boolean);
  }catch(e){
    console.warn('Asset URL collection failed:', e);
    return [];
  }
}

async function assetSelfTest(){
  const urls = __collectAssetUrls();
  if (!urls.length){ console.warn('Asset test: no URLs collected'); return; }
  const head = async (u) => {
    try {
      const r = await fetch(u, { method:'HEAD', cache:'no-store' });
      return { url:u, ok:r.ok, status:r.status };
    } catch(e){
      return { url:u, ok:false, status:'network' };
    }
  };
  const results = await Promise.all(urls.map(head));
  const bad = results.filter(r => !r.ok);
  if (bad.length){
    console.group('%cMissing/blocked assets','color:#ffb36a');
    bad.forEach(b => console.warn(b.status, b.url));
    console.groupEnd();
    window.__ASSET_ERRORS__ = bad.map(b => b.url);
  } else {
    console.info('All assets resolved (HEAD ok).');
    window.__ASSET_ERRORS__ = [];
  }
}

/* On-screen HUD note inside drawUI() */
(function(){
  const _oldDrawUI = window.drawUI;
  if (typeof _oldDrawUI === 'function'){
    window.drawUI = function(now){
      _oldDrawUI.call(this, now);
      try{
        const errs = Array.isArray(window.__ASSET_ERRORS__) ? window.__ASSET_ERRORS__ : [];
        if (errs.length && typeof ctx !== 'undefined'){
          let y = 64;
          ctx.fillStyle = '#ffb36a';
          ctx.fillText('Missing assets:', 6, y); y += 10;
          errs.slice(0,6).forEach(u => { 
            const short = u.replace(location.origin,'');
            ctx.fillText(short, 6, y); 
            y += 10; 
          });
          if (errs.length > 6) ctx.fillText(`…and ${errs.length-6} more`, 6, y);
        }
      }catch(e){}
    };
  }
})();
</script>
EOF_ASSET_FUNC
  echo ">> Injected assetSelfTest() function."
else
  echo ">> assetSelfTest() already present; skipping function injection."
fi

# 3) Ensure assetSelfTest() is called during boot() after assets load
if grep -q "async function boot()" "$PAGE"; then
  if ! grep -q "await assetSelfTest();" "$PAGE"; then
    # Insert after the Promise.all([...]) line inside boot()
    TMP="$PAGE.tmp-$STAMP"
    awk '
      BEGIN{added=0}
      {
        print $0
        if (!added && $0 ~ /await[[:space:]]+Promise\.all\(\[loadBackgrounds\(\),[[:space:]]*loadTiles\(\),[[:space:]]*loadAdImages\(\)\]\);/){
          print "    await assetSelfTest();"
          added=1
        }
      }' "$PAGE" > "$TMP"
    mv "$TMP" "$PAGE"
    echo ">> Added call to assetSelfTest() inside boot()."
  else
    echo ">> assetSelfTest() call already present; skipping."
  fi
else
  echo "WARN: Could not find boot() function signature; manual insertion may be needed."
fi

echo ">> Done. Now run your app, open DevTools Console for a list of any 404/blocked assets, and look for an in-HUD 'Missing assets' panel."

# FINAL REMINDERS
echo
echo "== Reminders =="
echo "• With <base href=\"/blackout-protocol/\"> your image URLs resolve to /blackout-protocol/assets/…"
echo "• Make sure files live at $DEST with EXACT casing (Linux is case-sensitive)."
echo "• If some assets still show as missing, verify their names and locations in Replit file tree."
