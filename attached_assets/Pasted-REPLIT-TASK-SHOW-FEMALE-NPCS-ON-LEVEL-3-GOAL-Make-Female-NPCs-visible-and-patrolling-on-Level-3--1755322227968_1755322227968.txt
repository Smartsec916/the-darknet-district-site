REPLIT TASK: SHOW FEMALE NPCS ON LEVEL 3

GOAL
- Make Female NPCs visible and patrolling on Level 3.
- Use these exact assets: ./img/female_idle.png, ./img/female_run.png
- Avoid culling/alpha bugs so they render as soon as Level 3 starts.

PATCH PLAN (create or modify the following snippets):

1) assets.js (or wherever you centralize asset paths)
----------------------------------------------------------------
export const ASSETS = {
  // ...keep existing entries
  female_idle: "./img/female_idle.png",
  female_run:  "./img/female_run.png",
};

export async function preloadImages(loader = (src)=>new Promise((res,rej)=>{
  const i=new Image(); i.onload=()=>res(i); i.onerror=rej; i.src=src;
})) {
  // Ensure all images are awaited before bootLevel resolves
  const entries = Object.entries(ASSETS);
  const loaded = await Promise.all(entries.map(([k,src]) => loader(src).then(img => [k,img])));
  const atlas = Object.fromEntries(loaded);
  return atlas;
}

2) animation.js (or your sprite/animation helper)
----------------------------------------------------------------
export function makeSimpleAnim(img, fps=6) {
  // For single-frame images, just return the same frame each tick.
  return {
    img,
    frameW: img.width,
    frameH: img.height,
    frames: 1,
    fps,
    getFrame: (_time)=>0
  };
}

3) entities/FemaleNPC.js
----------------------------------------------------------------
import { makeSimpleAnim } from "./animation.js";

export class FemaleNPC {
  constructor(x, y, facing = -1, images) {
    this.type = "female-npc";
    this.x = x; this.y = y;
    this.vx = 0; this.vy = 0;
    this.scale = 1;
    this.alpha = 1;
    this.facing = facing; // -1 left, +1 right
    this.persist = true;  // do not auto-despawn off-camera
    this.solid = false;
    this.width = images.female_idle.width;
    this.height = images.female_idle.height;
    this.anim = {
      idle: makeSimpleAnim(images.female_idle, 1),
      run:  makeSimpleAnim(images.female_run,  8),
    };
    this.state = "idle";
    this.patrol = null; // filled by level spawner if provided
    this.patrolIndex = 0;
  }

  setPatrol(pts) { this.patrol = pts; }

  update(dt, world) {
    // Simple patrol AI
    if (this.patrol && this.patrol.length >= 2) {
      const target = this.patrol[this.patrolIndex];
      const speed = 60; // px/s
      const dx = target.x - this.x;
      if (Math.abs(dx) > 2) {
        this.vx = Math.sign(dx) * speed;
        this.state = "run";
        this.facing = Math.sign(dx);
      } else {
        this.patrolIndex = (this.patrolIndex + 1) % this.patrol.length;
      }
    } else {
      this.vx = 0;
      this.state = "idle";
    }
    this.x += this.vx * dt;
    // Stick to ground if your world has GROUND_Y:
    if (world && typeof world.groundY === "number") this.y = world.groundY - this.height;
  }

  draw(ctx, camera) {
    if (!ctx) return;
    const left = camera.x - 128, right = camera.x + camera.w + 128; // safety margin
    const top = camera.y - 128, bottom = camera.y + camera.h + 128;
    if (this.x + this.width < left || this.x - this.width > right || this.y > bottom || this.y + this.height < top) return;

    ctx.save();
    ctx.globalAlpha = this.alpha ?? 1;
    ctx.translate(Math.round(this.x), Math.round(this.y));
    ctx.scale(this.facing < 0 ? -this.scale : this.scale, this.scale);
    const a = this.anim[this.state] ?? this.anim.idle;
    ctx.drawImage(a.img, 0, 0);
    ctx.restore();
  }
}

4) engine.js (hook into your loader, entity registry, render & update loops)
----------------------------------------------------------------
import { preloadImages, ASSETS } from "./assets.js";
import { FemaleNPC } from "./entities/FemaleNPC.js";

let IMAGES = null;

export async function bootLevel(levelNumber, opts={}) {
  // PRELOAD once (idempotent)
  if (!IMAGES) IMAGES = await preloadImages();

  // ...existing level construction...
  const world = createWorld(levelNumber, opts); // your existing function

  // Register draw order: background -> NPCs -> player -> particles -> UI
  world.layers = world.layers || {};
  world.layers.npcs = [];

  world.spawnEntity = (ent) => {
    if (ent.type === "female-npc") world.layers.npcs.push(ent);
    else world.entities.push(ent);
  };

  // Level-specific spawns (see Level 3 below)
  if (levelNumber === 3) {
    // Ground reference safe default if missing
    world.groundY = world.groundY ?? 640;

    const spawnFemale = (x,y, patrol=null, facing=-1) => {
      const f = new FemaleNPC(x, y, facing, {
        female_idle: IMAGES.female_idle,
        female_run:  IMAGES.female_run
      });
      if (patrol) f.setPatrol(patrol);
      world.spawnEntity(f);
    };

    // Spawn a few across the map
    spawnFemale(1650, world.groundY, [{x:1600,y:world.groundY},{x:1900,y:world.groundY}], 1);
    spawnFemale(2300, world.groundY, [{x:2250,y:world.groundY},{x:2550,y:world.groundY}], -1);
    spawnFemale(3000, world.groundY, [{x:2950,y:world.groundY},{x:3300,y:world.groundY}], 1);
  }

  // UPDATE hook
  const originalUpdate = world.update;
  world.update = (dt) => {
    if (originalUpdate) originalUpdate(dt);
    (world.layers.npcs||[]).forEach(n => n.update(dt, world));
  };

  // DRAW hook
  const originalDraw = world.draw;
  world.draw = (ctx) => {
    if (originalDraw) originalDraw(ctx);
    (world.layers.npcs||[]).forEach(n => n.draw(ctx, world.camera));
  };

  // Common pitfalls: make sure nothing zeroes alpha/scale
  world.onLevelStart = () => {
    (world.layers.npcs||[]).forEach(n => { n.alpha = 1; n.scale = 1; });
  };

  // continue with your existing start loop...
  startGameLoop(world);
}

5) level3.html (already correct, keep it)
----------------------------------------------------------------
- Ensure it sets sessionStorage 'gameLevel' to '3' and calls bootLevel(3).
- File is good as provided.

VALIDATION CHECKLIST
- Confirm these files exist with EXACT case: ./img/female_idle.png, ./img/female_run.png
- Ensure any "auto-despawn off-camera" code ignores entities with ent.persist === true
- Ensure camera initially starts near x=0; first spawn x should be reachable or adjust camera start
- Confirm draw order places NPCs after background
- Ensure no global CSS or canvas blend sets ctx.globalAlpha=0 anywhere

END TASK
