# === Blackout Protocol: verify real assets (no placeholders), fix ad overlap, fix shop page ===
set -euo pipefail
cd ~/workspace 2>/dev/null || { echo "❌ Run: cd ~/workspace"; exit 1; }
[ -f blackout-protocol/index.html ] || { echo "❌ Not at project root (no blackout-protocol/index.html)"; exit 1; }

ASSETS="blackout-protocol/assets"
PAGE="blackout-protocol/index.html"
SHOP="blackout-protocol/game-shop.html"
STAMP="$(date +%Y%m%d-%H%M%S)"
mkdir -p "$ASSETS" logs

echo "== Run @ $STAMP =="

# --- helper: png signature ---
png_sig(){ hexdump -n 8 -ve '1/1 "%02x"' "$1" 2>/dev/null || true; }
is_bad_png(){ local s; s="$(png_sig "$1")"; [ ! -s "$1" ] && return 0; [ "$s" != "89504e470d0a1a0a" ] && return 0 || return 1; }

# --- 1) Make sure the 5 required art files are present in blackout-protocol/assets ---
# We DO NOT fabricate placeholders. We try to find your uploads elsewhere and copy them in.
REQ=("btc_glow.png" "shop_door_neon.png" "ledge_tile.png" "platform_industrial.png" "hacker_terminal.png")

echo "-- scanning for your real assets and moving them into $ASSETS (if found) --"
for name in "${REQ[@]}"; do
  dst="$ASSETS/$name"
  if [ -s "$dst" ] && ! is_bad_png "$dst"; then
    echo "  • OK: $dst"
    continue
  fi

  # try to locate candidates elsewhere in the project (case-insensitive file name match)
  src="$(find . -type f \( -iname "$name" -o -iname "${name%.*}"'*.png' \) | head -n 1 || true)"
  if [ -n "${src:-}" ]; then
    cp -f "$src" "$dst"
    echo "  ✓ Copied $src  ->  $dst"
  else
    echo "  ✗ Missing: $dst  (upload this exact filename)"
  fi
done

# report integrity after any copies
echo
echo "-- asset integrity --"
MISS=0
for name in "${REQ[@]}"; do
  f="$ASSETS/$name"
  if is_bad_png "$f"; then
    echo "  ✗ BAD/MISSING: $f  (size=$(wc -c <"$f" 2>/dev/null || echo 0), sig=$(png_sig "$f"))"
    MISS=$((MISS+1))
  else
    echo "  ✓ PNG OK: $f (sig=$(png_sig "$f"))"
  fi
done

# --- 2) Shopkeeper portrait alias (only if you already uploaded one) ---
if [ -s "$ASSETS/shop_keeper_cyberpunk.png" ]; then
  cp -f "$ASSETS/shop_keeper_cyberpunk.png" "$ASSETS/shop_addmen.png"
  echo "• Aliased shop portrait: assets/shop_addmen.png -> shop_keeper_cyberpunk.png"
fi

# --- 3) Bump cache-bust in index.html so fresh images are fetched ---
if grep -q "const[[:space:]]\+HYPER_RELOAD_TAG" "$PAGE"; then
  sed -i -E "s|(const[[:space:]]+HYPER_RELOAD_TAG[[:space:]]*=[[:space:]]*')[^']*('|)|\1rev=$STAMP\2|" "$PAGE" || true
  sed -i -E "s|(const[[:space:]]+HYPER_RELOAD_TAG[[:space:]]*=[[:space:]]*\")[^\"]*(\"|\")|\1rev=$STAMP\2|" "$PAGE" || true
  echo "✓ cache tag bumped in index.html"
fi

# --- 4) Inject ad de-overlap runtime patch (idempotent; no asset changes) ---
if ! grep -q "RUNTIME_PATCH_UI_ADS_v3" "$PAGE"; then
  TMP="$PAGE.tmp-$STAMP"
  awk -v mark="<!-- RUNTIME_PATCH_UI_ADS_v3 -->" '
    BEGIN{done=0}
    /<\/body>/ && !done {
      print mark;
      print "<script>(function(){";
      print "if(window.RUNTIME_PATCH_UI_ADS_v3) return; window.RUNTIME_PATCH_UI_ADS_v3=1;";
      print "window.drawOverlay=function(now){var oc=document.getElementById(\"overlayCanvas\");if(!oc)return;var octx=oc.getContext(\"2d\");octx.clearRect(0,0,oc.width,oc.height);var vis=[],ads=window.ads||[];";
      print "for(var i=0;i<ads.length;i++){var a=ads[i];var sx=Math.round(window.RENDER.ox+(a.x-window.cameraX)*window.RENDER.scale);var sy=Math.round(window.RENDER.oy+a.y*window.RENDER.scale);if(sx>-200&&sx<oc.width+200&&sy<oc.height*0.85)vis.push({a:a,sx:sx,sy:sy});}";
      print "function imgFor(a){if(a.kind===\"fourk\")return AdImages&&AdImages.fourk; if(a.kind===\"meat\")return AdImages&&AdImages.meat; if(a.kind===\"holo\")return AdImages&&AdImages.holo; if(a.kind===\"rent\")return AdImages&&AdImages.rent; if(a.kind===\"drink\"){var idx=(Math.floor((performance.now()/350))%2); return AdImages&&AdImages.drink&&AdImages.d
