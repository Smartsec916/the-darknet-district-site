REPLIT PATCH: FORCE SPAWN + FIX DRAW FOR FEMALE NPCs ON LEVEL 3

GOAL
- Guarantee a visible Female NPC on Level 3 using ./img/female_idle.png and ./img/female_run.png.
- Bypass culling/alpha/order pitfalls; verify rendering with a debug sprite at camera center.

A) assets.js (or wherever you map images) — ensure exact lowercase paths
----------------------------------------------------------------
export const ASSETS = {
  // ...keep existing
  female_idle: "./img/female_idle.png",
  female_run:  "./img/female_run.png",
};

export async function preloadImages() {
  if (window.__IMG_ATLAS__) return window.__IMG_ATLAS__;
  const load = (src) => new Promise((res, rej) => { const i=new Image(); i.onload=()=>res(i); i.onerror=rej; i.src=src; });
  const entries = await Promise.all(Object.entries(ASSETS).map(async ([k,src]) => [k, await load(src)]));
  window.__IMG_ATLAS__ = Object.fromEntries(entries);
  return window.__IMG_ATLAS__;
}

B) entities/female_npc.js — minimal entity that cannot be auto-culled
----------------------------------------------------------------
export class FemaleNPC {
  constructor(x, y, imgs, facing=1) {
    this.type="female-npc";
    this.x=x; this.y=y; this.facing=facing;
    this.vx=0; this.alpha=1; this.scale=1; this.persist=true; // persist disables offscreen auto-despawn
    this.imgIdle = imgs.female_idle; this.imgRun = imgs.female_run;
    this.state="idle";
    this.w=this.imgIdle.width; this.h=this.imgIdle.height;
  }
  update(dt, world){
    // simple patrol if provided on the world
    const p=this.patrol;
    if (p && p.length>1){
      const t=p[this.i??(this.i=0)];
      const s=60; const dx=t.x-this.x;
      if (Math.abs(dx)>2){ this.vx=Math.sign(dx)*s; this.state="run"; this.facing=Math.sign(dx); }
      else { this.i=(this.i+1)%p.length; }
    } else { this.vx=0; this.state="idle"; }
    this.x += this.vx*dt;
    if (world && typeof world.groundY==="number") this.y = world.groundY - this.h; // stick to ground
  }
  draw(ctx, cam){
    if (!ctx) return;
    // soft culling (big margins so we still see it while debugging)
    if (this.x < cam.x-256 || this.x > cam.x+cam.w+256) {/* still draw during debug */}
    ctx.save();
    ctx.globalAlpha=this.alpha;
    ctx.translate(Math.round(this.x), Math.round(this.y));
    ctx.scale(this.facing<0?-this.scale:this.scale, this.scale);
    const img = (this.state==="run" && this.imgRun) ? this.imgRun : this.imgIdle;
    ctx.drawImage(img, 0, 0);
    ctx.restore();
  }
}

C) engine.js — preload, register layer, force a visible spawn, fix draw order/alpha
----------------------------------------------------------------
import { preloadImages } from "./assets.js";
import { FemaleNPC } from "./entities/female_npc.js";

let IMAGES=null;

export async function bootLevel(n, opts={}){
  IMAGES = await preloadImages();                          // 1) ensure loaded
  const world = createWorld(n, opts);                      // your existing function
  world.camera = world.camera || { x:0, y:0, w:960, h:720 };
  world.groundY = world.groundY ?? 640;

  // guarantee layers exist
  world.layers = world.layers || {};
  world.layers.npcs = world.layers.npcs || [];
  world.entities = world.entities || [];

  // draw order: bg -> npcs -> player -> fx -> ui
  const origDraw = world.draw;
  world.draw = (ctx)=>{
    if (origDraw) origDraw(ctx);
    (world.layers.npcs||[]).forEach(e=>e.draw(ctx, world.camera));
  };
  const origUpdate = world.update;
  world.update = (dt)=>{
    if (origUpdate) origUpdate(dt);
    (world.layers.npcs||[]).forEach(e=>e.update(dt, world));
  };

  // SAFETY: never zero alpha globally
  world.onLevelStart = ()=>{
    (world.layers.npcs||[]).forEach(e=>{ e.alpha=1; e.scale=1; });
  };

  // LEVEL 3 SPAWNS
  if (n===3){
    // 0) DEBUG: one sprite at camera center so it MUST be visible
    const center = new FemaleNPC(world.camera.x + world.camera.w/2 - (IMAGES.female_idle.width/2),
                                 world.groundY - IMAGES.female_idle.height,
                                 IMAGES, 1);
    center.debug = true;
    world.layers.npcs.push(center);

    // 1) Regular patrols further right
    const make = (x1,x2)=> {
      const f=new FemaleNPC(x1, world.groundY - IMAGES.female_idle.height, IMAGES, 1);
      f.patrol=[{x:x1,y:world.groundY},{x:x2,y:world.groundY}];
      world.layers.npcs.push(f);
    };
    make(1650,1900);
    make(2300,2550);
    make(3000,3300);
  }

  // start loop
  startGameLoop(world); // your existing call
}

D) QUICK DIAGNOSTIC (optional but useful)
----------------------------------------------------------------
- In your main loop, log once after boot: console.log("NPCs:", world.layers.npcs.length);
- If 0, the spawn code isn't running (wrong import/bootLevel not called).
- If >0 but nothing on screen, check: world.camera.x at start, and any post-draw that resets ctx.globalAlpha=0.

E) CHECKLIST
----------------------------------------------------------------
[ ] File names EXACT: ./img/female_idle.png and ./img/female_run.png (Linux is case-sensitive)
[ ] Player/camera starts near x=0; you should immediately see the centered debug NPC on level start
[ ] No global canvas state sets alpha=0 or scale≈0 after npc draw
[ ] No "auto-despawn when offscreen" code removing entities with ent.persist===true
[ ] Draw order includes npcs after backgrounds
