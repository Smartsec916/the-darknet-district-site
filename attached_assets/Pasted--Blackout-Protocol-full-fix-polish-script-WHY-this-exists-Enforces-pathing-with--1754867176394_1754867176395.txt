# === Blackout Protocol: full fix & polish script ===
# WHY this exists:
# - Enforces pathing with <base href="/blackout-protocol/"> so all "assets/..." load from /blackout-protocol/assets/ (your game folder)
# - Adds/bump HYPER_RELOAD_TAG to defeat stale browser caching
# - Appends cache-bust to sprite states (player/robot/drone) which were missing it, causing silent "cached 404" issues
# - Makes BTC coins always reachable and slightly increases magnet pickup range (player feedback)
# - Spawns drones only AFTER the shop door (i.e., next level), keeping level 1 clean
# - Provides a custom game-shop.html that uses your background, persists purchases, and routes back to index

set -euo pipefail

PAGE="./blackout-protocol/index.html"
SHOP="./blackout-protocol/game-shop.html"
STAMP="$(date +%Y%m%d-%H%M%S)"
HRT="rev=$STAMP"

echo "==> Verifying files and making backups..."
[ -f "$PAGE" ] || { echo "ERROR: $PAGE not found"; exit 1; }
cp "$PAGE" "$PAGE.bak-$STAMP"
[ -f "$SHOP" ] && cp "$SHOP" "$SHOP.bak-$STAMP" || true
echo "  • Backed up index.html to $PAGE.bak-$STAMP"
[ -f "$SHOP" ] && echo "  • Backed up existing game-shop.html to $SHOP.bak-$STAMP" || echo "  • No existing game-shop.html to backup"

echo
echo "==> 1) Ensure <base href=\"/blackout-protocol/\"> so all 'assets/...' resolve under /blackout-protocol/assets/"
if ! grep -q '<base href="/blackout-protocol/">' "$PAGE"; then
  awk '
    BEGIN{done=0}
    /<head[^>]*>/ && !done { print; print "  <base href=\"/blackout-protocol/\">"; done=1; next }
    { print }
  ' "$PAGE" > "$PAGE.tmp1" && mv "$PAGE.tmp1" "$PAGE"
  echo "  • Inserted base href into <head>"
else
  echo "  • Base href already present"
fi

echo
echo "==> 2) Ensure/bump HYPER_RELOAD_TAG (cache-busting) so browsers fetch fresh images"
if grep -qE 'const[[:space:]]+HYPER_RELOAD_TAG' "$PAGE"; then
  perl -0777 -pe "s/(const\\s+HYPER_RELOAD_TAG\\s*=\\s*['\"])rev=[^'\"']*(['\"])/\\1$HRT\\2/g" -i "$PAGE"
  echo "  • Bumped existing HYPER_RELOAD_TAG to $HRT"
else
  # Insert just after the first <script> tag
  perl -0777 -pe "s~(<script[^>]*>)~\\1\nconst HYPER_RELOAD_TAG = '$HRT'; // injected cache-bust~i" -i "$PAGE"
  echo "  • Inserted HYPER_RELOAD_TAG = '$HRT'"
fi

echo
echo "==> 3) Cache-bust player/robot/drone sprite states (they were plain 'assets/*.png' without ?tag)"
# Transform within the states blocks only, keeping your formatting:
perl -0777 -pe '
  s/(player:\{[\s\S]*?states:\{)([\s\S]*?)(\}\s*,\s*fps)/$1.($2=~s/'\''(assets\/[^'\''\?]+\.png)'\''/`$1?\${HYPER_RELOAD_TAG}`/gr).$3/ge;
  s/(robot:\{[\s\S]*?states:\{)([\s\S]*?)(\}\s*,\s*fps)/$1.($2=~s/'\''(assets\/[^'\''\?]+\.png)'\''/`$1?\${HYPER_RELOAD_TAG}`/gr).$3/ge;
  s/(drone:\{[\s\S]*?states:\{)([\s\S]*?)(\}\s*,\s*fps)/$1.($2=~s/'\''(assets\/[^'\''\?]+\.png)'\''/`$1?\${HYPER_RELOAD_TAG}`/gr).$3/ge;
' -i "$PAGE"
echo "  • Added ?\${HYPER_RELOAD_TAG} to sprite state PNGs"

echo
echo "==> 4) Make BTC coins always reachable and slightly increase magnet pickup range"
# Replace the whole coin generation block (anchors between // coins ... and // terminals)
perl -0777 -pe '
  s|// coins \(3-5 per chunk for better accessibility\)[\s\S]*?// terminals|// coins (always reachable)\n  const cc=4+((Math.random()*2)|0);\n  for(let i=0;i<cc;i++){\n    const cx=(startX+40+Math.random()*(CHUNK-80))|0;\n    // Find nearest platform under this x (not ground)\n    let anchor=null;\n    for(const p of platforms){\n      if(p.y < VH-TILE && cx>=p.x-12 && cx<=p.x+p.w+12){ if(!anchor || p.y<anchor.y) anchor=p; }\n    }\n    let cy;\n    if(anchor){\n      cy=(anchor.y-22)|0;\n    }else{\n      const maxRise=90, gy=groundY();\n      const minY=Math.max(gy-maxRise,48);\n      cy=Math.max(minY,VH-96)|0;\n    }\n    coins.push({x:cx,y:cy,r:10,taken:false});\n  }\n\n  // terminals|s
' -i "$PAGE"

# Increase magnet pickup range
perl -0777 -pe 's/const\s+magnetRange\s*=\s*player\.upgrades\?\.\s*coinMagnet\s*\?\s*\d+\s*:\s*\d+\s*;/const magnetRange = player.upgrades?.coinMagnet ? 26 : 12;/' -i "$PAGE"
echo "  • Coins snap above ledges or within jump reach; magnet range now 26/12 (was 20/8)"

echo
echo "==> 5) Keep drones out of level 1 (spawn only after shop door / next level)"
perl -0777 -pe 's/if\s*\(\s*Math\.random\(\)\s*<\s*\.6\s*\)\s*\{/(function(){})(); if (startX >= LEVEL_LEN && Math.random()<.6){/' -i "$PAGE"
# The dummy IIFE prevents accidental replacement in unlikely edge-cases by breaking earlier identical tokens; harmless at runtime.
echo "  • Drones now spawn only when startX >= LEVEL_LEN"

echo
echo "==> 6) Create/refresh a custom game-shop.html with your own background & UI"
cat > "$SHOP" <<'EOF_SHOP'
<!DOCTYPE html>
<html lang="en">
<head>
  <base href="/blackout-protocol/">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Blackout Protocol — Shop</title>
  <style>
    :root{ --panel:#0f1016; --text:#cfd6df; --accent:#6fc2ff; }
    html,body{margin:0;height:100%;font-family:monospace;background:#000;color:var(--text);}
    .wrap{
      min-height:100%;
      background:#000 url("assets/01_bg_mid_transparent_1024w.png?${HYPER_RELOAD_TAG}") center/cover no-repeat fixed;
      display:flex; align-items:center; justify-content:center; padding:24px;
    }
    .shop{ width:min(960px,92vw); background:rgba(10,14,20,.88); border:2px solid #3a4556; border-radius:12px; padding:16px; box-shadow:0 8px 30px rgba(0,0,0,.45);}
    .head{display:flex; justify-content:space-between; align-items:center; margin-bottom:12px;}
    .h1{font-size:18px; letter-spacing:.6px;}
    .stats{font-size:12px; color:#9aa3b2}
    .grid{display:grid; grid-template-columns:repeat(auto-fill,minmax(180px,1fr)); gap:12px;}
    .card{background:#121722; border:1px solid #283140; border-radius:10px; padding:12px;}
    .card h3{margin:0 0 6px 0; font-size:14px;}
    .price{color:#7dff9a; font-size:12px; margin:6px 0;}
    button{background:#0f1016; color:var(--text); border:1px solid #475569; border-radius:8px; padding:8px 10px; cursor:pointer;}
    button:hover{filter:brightness(1.1)}
    .footer{display:flex; gap:8px; justify-content:flex-end; margin-top:12px;}
  </style>
</head>
<body>
<div class="wrap">
  <div class="shop">
    <div class="head">
      <div class="h1">District Shop</div>
      <div class="stats" id="stats"></div>
    </div>

    <div class="grid" id="items"></div>

    <div class="footer">
      <button id="backBtn">Return to Game</button>
      <button id="resetBtn" title="Clear all upgrades and stats">Reset Progress</button>
    </div>
  </div>
</div>

<script>
const q=new URLSearchParams(location.search);
let btc=+q.get('btc')||0, score=+q.get('score')||0, level=+q.get('level')||1;

// Persist stats so the game picks them up on reset()
localStorage.setItem('playerBTC', String(btc));
localStorage.setItem('playerScore', String(score));
localStorage.setItem('gameLevel', String(level));

// Upgrades shape matches what the game expects
const upgrades = JSON.parse(localStorage.getItem('playerUpgrades')||'{}');

const catalog = [
  { id:'speedBoost',     name:'Kinetic Boots',     desc:'Run speed +30%',    price:12 },
  { id:'jumpBoost',      name:'Grav Mod',          desc:'Jump height +20%',  price:10 },
  { id:'armor',          name:'Poly Armor',        desc:'Damage -25%',       price:15 },
  { id:'coinMagnet',     name:'Coin Magnet',       desc:'Pickup range x2',   price:8  },
  { id:'advancedHack',   name:'ADV EMP Suite',     desc:'EMP lasts +2s',     price:14 }
];

function render(){
  document.getElementById('stats').textContent = `Level ${level} | Score ${score} | BTC ${btc}`;
  const grid = document.getElementById('items');
  grid.innerHTML = '';
  catalog.forEach(item=>{
    const owned = !!upgrades[item.id];
    const el = document.createElement('div');
    el.className = 'card';
    el.innerHTML = `
      <h3>${item.name}</h3>
      <div style="font-size:12px;color:#9aa3b2">${item.desc}</div>
      <div class="price">Price: ${item.price} BTC</div>
      <button ${owned?'disabled':''} data-id="${item.id}">${owned?'Owned':'Buy'}</button>
    `;
    grid.appendChild(el);
  });
}

document.getElementById('items').addEventListener('click', e=>{
  const id = e.target?.dataset?.id; if(!id) return;
  const item = catalog.find(x=>x.id===id); if(!item) return;
  if (upgrades[id]) return;
  if (btc < item.price) { alert('Not enough BTC!'); return; }
  btc -= item.price;
  upgrades[id] = true;
  localStorage.setItem('playerUpgrades', JSON.stringify(upgrades));
  localStorage.setItem('playerBTC', String(btc));
  render();
});

document.getElementById('backBtn').onclick = () => { location.href = './index.html'; };
document.getElementById('resetBtn').onclick = () => {
  if (!confirm('Reset all progress and upgrades?')) return;
  localStorage.removeItem('playerUpgrades');
  localStorage.removeItem('playerBTC');
  localStorage.removeItem('playerScore');
  localStorage.removeItem('playerHealth');
  localStorage.removeItem('gameLevel');
  btc=0; score=0; level=1;
  render();
};

render();
</script>
</body>
</html>
EOF_SHOP
echo "  • Wrote custom shop page with cache-busted background and your own UI"

echo
echo "==> 7) Final sanity: quick greps"
grep -q '<base href="/blackout-protocol/">' "$PAGE" && echo "  • index.html base OK"
grep -q 'HYPER_RELOAD_TAG' "$PAGE" && echo "  • index.html cache-bust tag present"
grep -q 'LEVEL COMPLETE' "$PAGE" && echo "  • index.html looks intact around UI text"

echo
echo "==> DONE. What changed:"
echo "  • index.html: base href ensured, cache-bust bumped/added, sprite states cache-busted"
echo "  • index.html: coins placement made reachable, magnet pickup increased"
echo "  • index.html: drones spawn only after LEVEL_LEN (post-shop / next level)"
echo "  • game-shop.html: custom shop created using your background, upgrades persist via localStorage"
echo
echo "Now hard-refresh the game (Ctrl/Cmd+Shift+R) and test:"
echo "  1) All PNGs should load; console shows ✓ Asset loaded lines."
echo "  2) BTC should always be reachable / magnet easier."
echo "  3) No drones before the shop; drones appear after."
echo "  4) Shop shows your UI and background; purchases apply on next run."
