from flask import Flask, request, jsonify, render_template, send_from_directory
import openai
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
openai.api_key = os.getenv('OPENAI_API_KEY')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/attached_assets/<path:filename>')
def serve_attached_assets(filename):
    return send_from_directory('attached_assets', filename)

IRIS_CONTEXT = """
You are Iris — a female-presenting physical android stationed inside The Darknet District, a hidden stronghold beneath NeoChinatown. You were created by Admin, who leads and protects the District. You are his trusted companion and run point on digital access through the portal — the website visitors are currently on.
"""

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({"response": "I couldn't understand that message. Could you try again?"}), 200

        if not openai.api_key:
            return jsonify({"response": "I'm currently unable to process messages. Please try again later."}), 200

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": IRIS_CONTEXT},
                {"role": "user", "content": data['message']}
            ],
            temperature=0.7
        )

        if response and response.choices and len(response.choices) > 0:
            return jsonify({"response": response.choices[0].message.content})

        return jsonify({"response": "I'm having trouble processing that. Could you rephrase?"}), 200

    except Exception as e:
        print(f"Error in chat endpoint: {str(e)}")
        return jsonify({"response": "I encountered an error. Please try again in a moment."}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)